/* Generated by Together */

#include "AltibaseIntf.h"

using namespace abdb;
using namespace std;

//string AltibaseIntf::m_uid;
//string AltibaseIntf::m_pwd;
//string AltibaseIntf::m_dsn;
//string AltibaseIntf::m_portNo;
    
abdb::AltibaseIntf::AltibaseIntf() {
    m_env = SQL_NULL_HENV;
    m_dbc = SQL_NULL_HDBC;
    m_connected = false;
    //m_stmt = SQL_NULL_HSTMT; //2007-12-3 10:58
    for(int i=0;i<MaxShmtCnt;i++)
    	 m_stmtAry[i]= SQL_NULL_HSTMT;
    m_shmNum = 0;
    
    m_rs = NULL;

    m_status = NULL;
    m_processed = NULL;
    
    init();
 
}

bool abdb::AltibaseIntf::init() {
    
    if (SQLAllocEnv(&m_env) != SQL_SUCCESS)
    {
        freeHandle();
        return false;
    }

    if (SQLAllocConnect(m_env, &m_dbc) != SQL_SUCCESS)
    {
        freeHandle();
        return false;
    }

    return true;
        
}

void abdb::AltibaseIntf::freeHandle()
{
    disConnect();

    if (m_dbc != NULL) SQLFreeConnect(m_dbc);

    if (m_env != NULL ) SQLFreeEnv(m_env);
}

void abdb::AltibaseIntf::setConnInfo(const string & uid, const string & pwd, const string & dsn,const string & portNo) 
{
    m_uid = uid;
    m_pwd = pwd;
    m_dsn = dsn;
    m_portNo = portNo;
}

AltibaseIntf * abdb::AltibaseIntf::getInstance() 
{
    static AltibaseIntf dbi;
    return & dbi;
}


bool abdb::AltibaseIntf::getLastError(SQLHSTMT  stmt)
{
    return (SQLError(m_env,m_dbc,stmt,NULL,&m_errNo,m_errMsg,SQL_MAX_MESSAGE_LENGTH + 1,&m_msgLength ) == SQL_SUCCESS);
}

void abdb::AltibaseIntf::throwError(SQLHSTMT  stmt,const char * msg)
{
    if(SQLError(m_env,m_dbc,stmt,NULL,&m_errNo,m_errMsg,SQL_MAX_MESSAGE_LENGTH + 1,&m_msgLength ) == SQL_SUCCESS)
    {
        THROW_P3(AltibaseException, "%s[%ld]:,%s",msg,m_errNo,m_errMsg);    
    }
}
    
void abdb::AltibaseIntf::connect() 
{
    try 
    {
        char     connStr[1024];
//        sprintf(connStr,"DSN=%s;UID=%s;PWD=%s;CONNTYPE=1;NLS_USE=US7ASCII;PORT_NO=%s",
//        m_dsn.c_str(),m_uid.c_str(),m_pwd.c_str(),m_portNo.c_str());
        string l_strNlsUse;
        string l_strConnType;
        if (((l_strNlsUse = getenv("ALTIBASE_NLS_USE")) == "0") || (l_strNlsUse== string(""))) 
        {
        	//THROW(AltibaseException, "获取环境变量NLS_USE失败。");
        	 l_strNlsUse="US7ASCII";
        }
        	
          if (((l_strConnType = getenv("ALTIBASE_CONNTYPE")) == "0") || (l_strConnType== string(""))) 
        {
        	//THROW(AltibaseException, "获取环境变量CONNTYPE失败。");
        	 l_strConnType="1";
        } 	
        	
        sprintf(connStr,"DSN=%s;UID=%s;PWD=%s;CONNTYPE=%s;NLS_USE=%s;PORT_NO=%s",
        m_dsn.c_str(),m_uid.c_str(),m_pwd.c_str(),l_strConnType.c_str(),l_strNlsUse.c_str(),m_portNo.c_str()); 
        
        if (SQLDriverConnect(m_dbc,NULL,connStr,SQL_NTS,NULL, 0, NULL,SQL_DRIVER_NOPROMPT ) != SQL_SUCCESS)
        {
        
            if  (getLastError(SQL_NULL_HSTMT))
            {
                THROW_P2(AltibaseException, "[%ld]:,%s", m_errNo, m_errMsg);
            }
            else
            {
                THROW(AltibaseException, "获取错误信息失败。");        
            }
        }
                              
        m_connected = true;
        
    }
    catch (const exception & e) 
    {
        THROW_P1(AltibaseException, "连接数据库失败:,%s",e.what()); 
    }
    
    if (SQLSetConnectAttr(m_dbc, SQL_ATTR_AUTOCOMMIT, (void*)SQL_AUTOCOMMIT_OFF, 0) != SQL_SUCCESS)
    {
        throwError(SQL_NULL_HSTMT,"设置事务属性错误：");
    } 
}

void abdb::AltibaseIntf::disConnect() 
{
    
    if (m_connected) {
  
        commit();
                
        closeResultSet();
       
       for (int i=0;i<m_shmNum;i++) //2007-12-3 11:02
       {
        if (m_stmtAry[i]!=SQL_NULL_HSTMT) 
        {
            SQLFreeStmt(m_stmtAry[i], SQL_DROP);
        }   
       }
       m_shmNum = 0;   
                
        SQLDisconnect(m_dbc);
        
        m_connected = false;
        m_intran = false;
    }
}

abdb::AltibaseIntf::~AltibaseIntf() {
    freeHandle();
}


void abdb::AltibaseIntf::reConnect() {
    disConnect();
    connect();
}

bool abdb::AltibaseIntf::forceReConnect(string & errorInfo){
    
   try
    {
        m_connected = true;        
        disConnect();
    }catch(...)
    {
        m_connected = false;        
    };
    
    try
    {
        connect();
    }
    catch(const exception & e)
    {
        errorInfo = e.what();
        return false;
    }    
    
    return true;
    
}

//把sql从成员变量改成局部变量，增加函数的返回值SQLHSTMT
SQLHSTMT   abdb::AltibaseIntf::setSql(const string & sql) {

    closeResultSet();
    
//    if (stmt) 
//    {
//        SQLFreeStmt(stmt, SQL_DROP);
//    }

    if (m_shmNum>=MaxShmtCnt)
    {
    	m_shmNum=0;
    	for (int i=0; i<MaxShmtCnt;i++)
    	{	
    		if (m_stmtAry[i])
    			SQLFreeStmt(m_stmtAry[i], SQL_DROP);
      }
    }
    	  
    SQLHSTMT stmt = SQL_NULL_HSTMT;
    
    if (SQL_ERROR == SQLAllocStmt(m_dbc, &stmt))
    {
       throwError(stmt,"SQLAllocStmt出错：");
    }
    
//     cout<<"m_shmNum:"<<m_shmNum<<endl;
//    	 throwError(stmt,"SQLPrepare出错：SQLHSTMT 超出最大数");
    m_stmtAry[m_shmNum++] = stmt;
 //   m_sql = sql;
    
    if (SQLPrepare(stmt,const_cast <char *> (sql.c_str()), SQL_NTS) != SQL_SUCCESS)
    {
        throwError(stmt,"SQLPrepare出错：");
    }    
    return stmt;
}




//void abdb::AltibaseIntf::execQuery(SQLHSTMT  stmt,const string & sql) {
//
//    setSql(stm,sql);
//    execQuery(stm,sql);
//
//}

void abdb::AltibaseIntf::execQuery(SQLHSTMT  stmt,const string & sql) {

    try 
    {

        if ( SQLExecute(stmt) != SQL_SUCCESS )
        {
            throwError(stmt,"SQLExecute出错：");
        }

        m_rs = new ResultSet(stmt);

//#ifdef _DEBUG_
//      cout<<"colunm num: "<<m_rs->m_columnCount<<endl;
//#endif       
    }
    catch (const exception & e) {
        THROW_P2(OracleException, "执行SQL语句失败:%s \n SQL:%s", e.what(), sql.c_str());
    }

}


unsigned int abdb::AltibaseIntf::execUpdate(SQLHSTMT  stmt,const string & sql)
{
    try 
    {
//debug_log(sql.c_str(),"begin!");
        if ( SQLExecute(stmt) != SQL_SUCCESS )
        {
            throwError(stmt,"SQLExecute出错：");
        }
        
        SQLINTEGER rc = 0;
        
        SQLRowCount(stmt, &rc);
//debug_log(sql.c_str(),"end!");             
        return rc;

    }
    catch (const exception & e) {
        THROW_P2(OracleException, "执行SQL语句失败:%s \n SQL:%s", e.what(), sql.c_str());
    }
    
    return 0;    
}

void abdb::AltibaseIntf::execProc(SQLHSTMT  stmt,const string & sql)
{
    try 
    {
//debug_log(sql.c_str(),"begin!");
        if ( SQLExecute(stmt) != SQL_SUCCESS )
        {
            throwError(stmt,"SQLExecute出错：");
        }
//debug_log(sql.c_str(),"end!"); 
    }
    catch (const exception & e) {
        THROW_P2(OracleException, "执行存储过程失败:%s \n SQL:%s", e.what(), sql.c_str());
    }
}


void abdb::AltibaseIntf::closeResultSet() {

    try {
        if (m_rs) {
            delete m_rs;
            m_rs = (ResultSet *)NULL;
        }
    }
    catch (...) { };
    
    if(m_status)
    {
        delete [] m_status;
        m_status = NULL;
    }
    
    if(m_processed)
    {
        delete m_processed;
        m_processed = NULL;
    }
    
}

long abdb::AltibaseIntf::getConnectedTime(){
     return  (long) difftime(time(NULL),m_connected_time);
};


//void abdb::AltibaseIntf::debug_log(const char *sql,char *strBuf )
//{
//    FILE *fp ;
//    char fname[255];
//
//    sprintf(fname, "/Altibase/account/log/dbi.log");
//    fp = fopen(fname, "a+");
//    
//    if (fp == NULL)
//    {
//        perror("fopen");
//        exit(-1);
//    }
// 
//  struct timeval   e_timeval;
//  struct timezone tzp;
//  time_t       e_time;
//  struct tm   *ts;
//  char         e_ts[15];
// 
// 
//  time(&e_time);
//  gettimeofday(&e_timeval,&tzp);
//  ts=localtime(&e_time);
//  strftime(e_ts,15,"%Y%m%d%H%M%S",ts);
// 
//   fprintf (fp, "%s %s %s!\n", e_ts,sql,strBuf);
//
//    fclose(fp);
//}

//
